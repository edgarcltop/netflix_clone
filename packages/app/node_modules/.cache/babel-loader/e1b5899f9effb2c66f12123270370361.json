{"ast":null,"code":"'use strict';\n\nvar json = require('./_json');\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\n\n\nfunction logger(loggerFunction) {\n  return function (requestResult) {\n    return loggerFunction(showRequestResult(requestResult));\n  };\n}\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\n\n\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n      method = requestResult.method,\n      path = requestResult.path,\n      requestContent = requestResult.requestContent,\n      responseHeaders = requestResult.responseHeaders,\n      responseContent = requestResult.responseContent,\n      statusCode = requestResult.statusCode,\n      timeTaken = requestResult.timeTaken;\n  var out = '';\n\n  function log(str) {\n    out = out + str;\n  }\n\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n');\n\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n');\n  }\n\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n');\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n');\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n');\n  return out;\n}\n\nfunction _indent(str) {\n  var indentStr = '  ';\n  return str.split('\\n').join('\\n' + indentStr);\n}\n\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true));\n}\n\nfunction _queryString(query) {\n  if (query == null) {\n    return '';\n  }\n\n  var keys = Object.keys(query);\n\n  if (keys.length === 0) {\n    return '';\n  }\n\n  var pairs = keys.map(function (key) {\n    return key + '=' + query[key];\n  });\n  return '?' + pairs.join('&');\n}\n\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult\n};","map":null,"metadata":{},"sourceType":"script"}