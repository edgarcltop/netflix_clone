{"ast":null,"code":"import _classCallCheck from \"/Users/swyx/Work/netlify-identity-fauna-reddit-clone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n// const request = require('superagent');\nvar faunadb = require('faunadb');\n\nvar q = faunadb.query;\n\nvar TodoModel = function TodoModel(key) {\n  var _this = this;\n\n  _classCallCheck(this, TodoModel);\n\n  this.list = function () {\n    return _this.listDatas[_this.listId];\n  };\n\n  this.todos = function () {\n    return _this.todosData[_this.listId] || [];\n  };\n\n  this.subscribe = function (onChange) {\n    _this.onChanges.push(onChange);\n  };\n\n  this.processChanges = function () {\n    _this.onChanges.forEach(function (cb) {\n      cb();\n    });\n  };\n\n  this.inform = function () {\n    _this.getServerLists().then(function () {\n      if (_this.listId) {\n        return _this.fetchList(_this.listId);\n      }\n    }).then(function () {\n      return _this.processChanges();\n    });\n  };\n\n  this.onAuthChange = function (faunadb_token) {\n    if (!faunadb_token) return null;\n    _this.listDatas = {}; // this.listId = null;\n\n    _this.todosData = {};\n    _this.lists = [];\n    _this.client = new faunadb.Client({\n      secret: faunadb_token\n    });\n    console.log('onAuthChange', faunadb_token);\n\n    _this.inform();\n  };\n\n  this.getServerLists = function () {\n    console.log('getServerLists'); // return this.client\n\n    return _this.client.query(q.Map(q.Paginate(q.Match( // todo use lists_by_owner\n    q.Ref('indexes/all_lists'))), function (ref) {\n      return q.Get(ref);\n    })).then(function (r) {\n      if (r.data.length === 0) {\n        // create the first list for the user\n        var me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n        return _this.client.query(q.Create(q.Class('lists'), {\n          data: {\n            title: 'Default Todo List',\n            owner: q.Select('ref', q.Get(q.Ref('classes/users/self')))\n          },\n          permissions: {\n            read: me,\n            write: me\n          }\n        })).then(function (defaultList) {\n          return _this.lists = [defaultList];\n        });\n      } else {\n        _this.lists = r.data;\n      }\n    });\n  };\n\n  this.getList = function (id) {\n    _this.listId = id;\n\n    if (_this.client) {\n      _this.fetchList(id).then(function () {\n        return _this.processChanges();\n      });\n    }\n  };\n\n  this.fetchList = function (id) {\n    // return {list, todos}\n    return _this.client.query(q.Get(q.Ref('classes/lists/' + id))).then(function (list) {\n      // console.log(\"fetchList!\", list);\n      _this.listDatas[id] = list;\n      return _this.client.query(q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), function (ref) {\n        return q.Get(ref);\n      })).then(function (resp) {\n        // console.log(\"got todos\", resp);\n        _this.todosData[id] = resp.data;\n        return {\n          list: list,\n          todos: resp.data\n        };\n      });\n    });\n  };\n\n  this.addList = function (title) {\n    var newList = {\n      title: title\n    };\n    var me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newList.owner = me;\n    return _this.client.query(q.Create(q.Class('lists'), {\n      data: newList,\n      permissions: {\n        read: me,\n        write: me\n      }\n    })).then(function (r) {\n      _this.inform();\n    });\n  };\n\n  this.addTodo = function (title, list) {\n    var newTodo = {\n      title: title,\n      list: list.ref,\n      completed: false\n    };\n    var me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newTodo.user = me;\n    return _this.client.query(q.Create(q.Ref('classes/todos'), {\n      data: newTodo,\n      permissions: {\n        read: me,\n        write: me\n      }\n    })).then(function (r) {\n      _this.inform();\n    });\n  };\n\n  this.toggleAll = function (checked, list) {\n    return _this.client.query(q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), function (ref) {\n      return q.Update(q.Select('ref', q.Get(ref)), {\n        data: {\n          completed: q.Not(q.Select(['data', 'completed'], q.Get(ref)))\n        }\n      });\n    })).then(function (r) {\n      _this.inform();\n    });\n  };\n\n  this.toggle = function (todoToToggle) {\n    console.log('todoToToggle', todoToToggle);\n    return _this.client.query(q.Update(todoToToggle.ref, {\n      data: {\n        completed: !todoToToggle.data.completed\n      }\n    })).then(function (r) {\n      _this.inform();\n    });\n  };\n\n  this.destroy = function (todo) {\n    return _this.client.query(q.Delete(todo.ref)).then(function () {\n      return _this.inform();\n    });\n  };\n\n  this.save = function (todoToSave, text) {\n    return _this.client.query(q.Update(todoToSave.ref, {\n      data: {\n        title: text\n      }\n    })).then(function (r) {\n      return _this.inform();\n    });\n  };\n\n  this.clearCompleted = function (list) {\n    return _this.client.query(q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), function (ref) {\n      return q.If(q.Select(['data', 'completed'], q.Get(ref)), q.Delete(q.Select('ref', q.Get(ref))), true);\n    })).then(function (r) {\n      return _this.inform();\n    });\n  };\n\n  this.key = key;\n  this.listDatas = {};\n  this.listId = null;\n  this.todosData = {};\n  this.lists = [];\n  this.onChanges = [];\n};\n\nexport { TodoModel as default };","map":{"version":3,"sources":["/Users/swyx/Work/netlify-identity-fauna-reddit-clone/packages/app/src/TodoModel.js"],"names":["faunadb","require","q","query","TodoModel","key","list","listDatas","listId","todos","todosData","subscribe","onChange","onChanges","push","processChanges","forEach","cb","inform","getServerLists","then","fetchList","onAuthChange","faunadb_token","lists","client","Client","secret","console","log","Map","Paginate","Match","Ref","ref","Get","r","data","length","me","Select","Create","Class","title","owner","permissions","read","write","defaultList","getList","id","Index","resp","addList","newList","addTodo","newTodo","completed","user","toggleAll","checked","Update","Not","toggle","todoToToggle","destroy","todo","Delete","save","todoToSave","text","clearCompleted","If"],"mappings":"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","sourcesContent":["// const request = require('superagent');\n\nconst faunadb = require('faunadb');\nconst q = faunadb.query;\n\nexport default class TodoModel {\n  constructor(key) {\n    this.key = key;\n    this.listDatas = {};\n    this.listId = null;\n    this.todosData = {};\n    this.lists = [];\n    this.onChanges = [];\n  }\n\n  list = () => {\n    return this.listDatas[this.listId];\n  };\n\n  todos = () => {\n    return this.todosData[this.listId] || [];\n  };\n\n  subscribe = onChange => {\n    this.onChanges.push(onChange);\n  };\n\n  processChanges = () => {\n    this.onChanges.forEach(function(cb) {\n      cb();\n    });\n  };\n\n  inform = () => {\n    this.getServerLists()\n      .then(() => {\n        if (this.listId) {\n          return this.fetchList(this.listId);\n        }\n      })\n      .then(() => this.processChanges());\n  };\n\n  onAuthChange = faunadb_token => {\n    if (!faunadb_token) return null;\n    this.listDatas = {};\n    // this.listId = null;\n    this.todosData = {};\n    this.lists = [];\n    this.client = new faunadb.Client({\n      secret: faunadb_token\n    });\n\n    console.log('onAuthChange', faunadb_token);\n    this.inform();\n  };\n\n  getServerLists = () => {\n    console.log('getServerLists');\n    // return this.client\n    return this.client\n      .query(\n        q.Map(\n          q.Paginate(\n            q.Match(\n              // todo use lists_by_owner\n              q.Ref('indexes/all_lists')\n            )\n          ),\n          ref => q.Get(ref)\n        )\n      )\n      .then(r => {\n        if (r.data.length === 0) {\n          // create the first list for the user\n          const me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n\n          return this.client\n            .query(\n              q.Create(q.Class('lists'), {\n                data: {\n                  title: 'Default Todo List',\n                  owner: q.Select('ref', q.Get(q.Ref('classes/users/self')))\n                },\n                permissions: {\n                  read: me,\n                  write: me\n                }\n              })\n            )\n            .then(defaultList => (this.lists = [defaultList]));\n        } else {\n          this.lists = r.data;\n        }\n      });\n  };\n\n  getList = id => {\n    this.listId = id;\n    if (this.client) {\n      this.fetchList(id).then(() => this.processChanges());\n    }\n  };\n\n  fetchList = id => {\n    // return {list, todos}\n    return this.client.query(q.Get(q.Ref('classes/lists/' + id))).then(list => {\n      // console.log(\"fetchList!\", list);\n      this.listDatas[id] = list;\n      return this.client\n        .query(\n          q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n            q.Get(ref)\n          )\n        )\n        .then(resp => {\n          // console.log(\"got todos\", resp);\n          this.todosData[id] = resp.data;\n          return { list, todos: resp.data };\n        });\n    });\n  };\n\n  addList = title => {\n    var newList = {\n      title: title\n    };\n\n    const me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newList.owner = me;\n\n    return this.client\n      .query(\n        q.Create(q.Class('lists'), {\n          data: newList,\n          permissions: {\n            read: me,\n            write: me\n          }\n        })\n      )\n      .then(r => {\n        this.inform();\n      });\n  };\n\n  addTodo = (title, list) => {\n    var newTodo = {\n      title: title,\n      list: list.ref,\n      completed: false\n    };\n\n    const me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newTodo.user = me;\n\n    return this.client\n      .query(\n        q.Create(q.Ref('classes/todos'), {\n          data: newTodo,\n          permissions: {\n            read: me,\n            write: me\n          }\n        })\n      )\n      .then(r => {\n        this.inform();\n      });\n  };\n\n  toggleAll = (checked, list) => {\n    return this.client\n      .query(\n        q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n          q.Update(q.Select('ref', q.Get(ref)), {\n            data: {\n              completed: q.Not(q.Select(['data', 'completed'], q.Get(ref)))\n            }\n          })\n        )\n      )\n      .then(r => {\n        this.inform();\n      });\n  };\n\n  toggle = todoToToggle => {\n    console.log('todoToToggle', todoToToggle);\n    return this.client\n      .query(\n        q.Update(todoToToggle.ref, {\n          data: {\n            completed: !todoToToggle.data.completed\n          }\n        })\n      )\n      .then(r => {\n        this.inform();\n      });\n  };\n\n  destroy = todo => {\n    return this.client.query(q.Delete(todo.ref)).then(() => this.inform());\n  };\n\n  save = (todoToSave, text) => {\n    return this.client\n      .query(\n        q.Update(todoToSave.ref, {\n          data: { title: text }\n        })\n      )\n      .then(r => this.inform());\n  };\n\n  clearCompleted = list => {\n    return this.client\n      .query(\n        q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n          q.If(\n            q.Select(['data', 'completed'], q.Get(ref)),\n            q.Delete(q.Select('ref', q.Get(ref))),\n            true\n          )\n        )\n      )\n      .then(r => this.inform());\n  };\n}\n"]},"metadata":{},"sourceType":"module"}