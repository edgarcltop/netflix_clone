{"ast":null,"code":"'use strict';\n/**\n * A representation of a FaunaDB Query Expression. Generally, you shouldn't need\n * to use this class directly; use the Query helpers defined in {@link module:query}.\n *\n * @param {Object} obj The object that represents a Query to be treated as an Expression.\n * @constructor\n */\n\nfunction Expr(obj) {\n  this.raw = obj;\n}\n\nExpr.prototype.toJSON = function () {\n  return this.raw;\n};\n\nvar varArgsFunctions = ['Do', 'Call', 'Union', 'Intersection', 'Difference', 'Equals', 'Add', 'Multiply', 'Subtract', 'Divide', 'Modulo', 'LT', 'LTE', 'GT', 'GTE', 'And', 'Or'];\nvar specialCases = {\n  is_nonempty: 'is_non_empty',\n  lt: 'LT',\n  lte: 'LTE',\n  gt: 'GT',\n  gte: 'GTE'\n};\n\nvar exprToString = function exprToString(expr, caller) {\n  if (expr instanceof Expr) expr = expr.raw;\n  var type = typeof expr;\n  if (type === 'string') return '\"' + expr + '\"';\n  if (type === 'symbol' || type === 'number' || type === 'boolean') return expr.toString();\n  if (type === 'undefined') return 'undefined';\n  if (expr === null) return 'null';\n\n  if (Array.isArray(expr)) {\n    var array = expr.map(function (item) {\n      return exprToString(item);\n    }).join(', ');\n    return varArgsFunctions.includes(caller) ? array : '[' + array + ']';\n  }\n\n  var keys = Object.keys(expr);\n  var fn = keys[0];\n  if (fn === 'object') return '{' + Object.keys(expr.object).map(function (k) {\n    return k + ': ' + exprToString(expr.object[k]);\n  }).join(', ') + '}';\n  if (fn in specialCases) fn = specialCases[fn];\n  fn = fn.split('_').map(function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }).join('');\n  var args = keys.map(function (k) {\n    var v = expr[k];\n    return exprToString(v, fn);\n  }).join(', ');\n  return fn + '(' + args + ')';\n};\n\nExpr.toString = exprToString;\nmodule.exports = Expr;","map":null,"metadata":{},"sourceType":"script"}