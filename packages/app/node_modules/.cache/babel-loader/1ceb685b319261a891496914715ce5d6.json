{"ast":null,"code":"'use strict';\n/**\n * A structure containing the request and response context for a given FaunaDB request.\n * Provided to an observer function optionally defined in the {@link Client} constructor.\n *\n * @param {Client} client\n *   The FaunaDB client used to execute the request.\n * @param {'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'} method\n *   The HTTP method used in the request.\n * @param {string} path\n *   The path that was queried. Relative to the client's domain.\n * @param {string} query\n *   URL query parameters. Only set if `method` is \"GET\".\n * @param {Object} requestRaw\n *   The JSON request string.\n * @param {Object} requestContent\n *   The request data.\n * @param {string} responseRaw\n *   The unparsed response data, as a string.\n * @param {object} responseContent\n *   The response data parsed as JSON.\n * @param {number} statusCode\n *   The HTTP response status code.\n * @param {object} responseHeaders\n *   The HTTP headers returned in the response.\n * @param {number} startTime\n *   The time the request was issued by the client.\n * @param {number} endTime\n *   The time the response was received by the client.\n * @constructor\n */\n\nfunction RequestResult(client, method, path, query, requestRaw, requestContent, responseRaw, responseContent, statusCode, responseHeaders, startTime, endTime) {\n  /** @type {Client} */\n  this.client = client;\n  /** @type {'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'} */\n\n  this.method = method;\n  /** @type {string} */\n\n  this.path = path;\n  /**\n   * URL query. Null unless `method == 'get'`.\n   * *Not* related to {@link Client.query}.\n   * @type {object}\n   */\n\n  this.query = query;\n  /** @type {string} */\n\n  this.requestRaw = requestRaw;\n  /** @type {object} */\n\n  this.requestContent = requestContent;\n  /** @type {string} */\n\n  this.responseRaw = responseRaw;\n  /**\n   * Parsed value returned by the server.\n   * Includes \"resource\" wrapper dict, or may be an \"errors\" dict instead.\n   * @type {object}\n   */\n\n  this.responseContent = responseContent;\n  /** @type {number} */\n\n  this.statusCode = statusCode;\n  /** @type {object} */\n\n  this.responseHeaders = responseHeaders;\n  /** @type {number} */\n\n  this.startTime = startTime;\n  /** @type {number} */\n\n  this.endTime = endTime;\n}\n/**\n * Returns the auth object configured in the client.\n * @type {{user: string, pass: string}}\n */\n\n\nObject.defineProperty(RequestResult.prototype, 'auth', {\n  get: function get() {\n    return this.client._secret;\n  }\n});\n/**\n * `this.endTime - this.startTime`: Time taken in milliseconds.\n * @type {number}\n */\n\nObject.defineProperty(RequestResult.prototype, 'timeTaken', {\n  get: function get() {\n    return this.endTime - this.startTime;\n  }\n});\nmodule.exports = RequestResult;","map":null,"metadata":{},"sourceType":"script"}