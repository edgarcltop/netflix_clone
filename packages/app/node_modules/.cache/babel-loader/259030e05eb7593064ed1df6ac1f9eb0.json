{"ast":null,"code":"'use strict';\n\nvar annotate = require('fn-annotate');\n\nvar deprecate = require('util-deprecate');\n\nvar Expr = require('./Expr');\n\nvar errors = require('./errors');\n\nvar values = require('./values');\n\nvar objectAssign = require('object-assign');\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://fauna.com/documentation/queries)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `classes/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.CLASSES))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a class ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given class.\n * @return {Expr}\n */\n\n\nfunction Ref() {\n  arity.between(1, 2, arguments);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        '@ref': wrap(arguments[0])\n      });\n\n    case 2:\n      return new Expr({\n        ref: wrap(arguments[0]),\n        id: wrap(arguments[1])\n      });\n  }\n}\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\n\n\nfunction Bytes(bytes) {\n  arity.exact(1, arguments);\n  return new values.Bytes(bytes);\n} // Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\n\n\nfunction Abort(msg) {\n  arity.exact(1, arguments);\n  return new Expr({\n    abort: wrap(msg)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\n\n\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments);\n  return new Expr({\n    at: wrap(timestamp),\n    expr: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\n\n\nfunction Let(vars, in_expr) {\n  arity.exact(2, arguments);\n\n  if (typeof in_expr === 'function') {\n    in_expr = in_expr.apply(null, Object.keys(vars).map(function (name) {\n      return Var(name);\n    }));\n  }\n\n  return new Expr({\n    let: wrapValues(vars),\n    in: wrap(in_expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\n\n\nfunction Var(varName) {\n  arity.exact(1, arguments);\n  return new Expr({\n    var: wrap(varName)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\n\n\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments);\n  return new Expr({\n    if: wrap(condition),\n    then: wrap(then),\n    else: wrap(_else)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\n\n\nfunction Do() {\n  arity.min(1, arguments);\n  var args = argsToArray(arguments);\n  return new Expr({\n    do: wrap(args)\n  });\n}\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\n\n\nvar objectFunction = function objectFunction(fields) {\n  arity.exact(1, arguments);\n  return new Expr({\n    object: wrapValues(fields)\n  });\n};\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */\n\n/**\n* See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n*\n* Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n* documentation.\n*\n* @param {module:query~ExprArg} var\n*   The names of the variables to be bound in this lambda expression.\n* @param {module:query~ExprArg} expr\n*   The lambda expression.\n* @return {Expr}\n*/\n\n\nfunction Lambda() {\n  arity.between(1, 2, arguments);\n\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0];\n\n      if (typeof value === 'function') {\n        return _lambdaFunc(value);\n      } else if (value instanceof Expr) {\n        return value;\n      } else {\n        throw new errors.InvalidValue('Lambda function takes either a Function or an Expr.');\n      }\n\n    case 2:\n      var var_name = arguments[0];\n      var expr = arguments[1];\n      return _lambdaExpr(var_name, expr);\n  }\n}\n/**\n * @private\n */\n\n\nfunction _lambdaFunc(func) {\n  var vars = annotate(func);\n\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue('Provided Function must take at least 1 argument.');\n\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])));\n\n    default:\n      return _lambdaExpr(vars, func.apply(null, vars.map(function (name) {\n        return Var(name);\n      })));\n  }\n}\n/**\n * @private\n */\n\n\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({\n    lambda: wrap(var_name),\n    expr: wrap(expr)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\n\n\nfunction Call(ref) {\n  arity.min(1, arguments);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    call: wrap(ref),\n    arguments: varargs(args)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\n\n\nfunction Query(lambda) {\n  arity.exact(1, arguments);\n  return new Expr({\n    query: wrap(lambda)\n  });\n} // Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\n\n\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments);\n  return new Expr({\n    map: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\n\n\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments);\n  return new Expr({\n    foreach: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\n\n\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments);\n  return new Expr({\n    filter: wrap(lambda_expr),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\n\n\nfunction Take(number, collection) {\n  arity.exact(2, arguments);\n  return new Expr({\n    take: wrap(number),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\n\n\nfunction Drop(number, collection) {\n  arity.exact(2, arguments);\n  return new Expr({\n    drop: wrap(number),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments);\n  return new Expr({\n    prepend: wrap(elements),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction Append(elements, collection) {\n  arity.exact(2, arguments);\n  return new Expr({\n    append: wrap(elements),\n    collection: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments);\n  return new Expr({\n    is_empty: wrap(collection)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\n\n\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments);\n  return new Expr({\n    is_nonempty: wrap(collection)\n  });\n} // Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the instance.\n * @return {Expr}\n */\n\n\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments);\n  ts = defaults(ts, null);\n  return new Expr(params({\n    get: wrap(ref)\n  }, {\n    ts: wrap(ts)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\n\n\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments);\n  return new Expr({\n    key_from_secret: wrap(secret)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\n\n\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments);\n  opts = defaults(opts, {});\n  return new Expr(objectAssign({\n    paginate: wrap(set)\n  }, wrapValues(opts)));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the instance's existence.\n * @return {Expr}\n */\n\n\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments);\n  ts = defaults(ts, null);\n  return new Expr(params({\n    exists: wrap(ref)\n  }, {\n    ts: wrap(ts)\n  }));\n} // Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a ClassRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the instance.\n * @return {Expr}\n */\n\n\nfunction Create(class_ref, params) {\n  arity.between(1, 2, arguments);\n  return new Expr({\n    create: wrap(class_ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the instance.\n * @return {Expr}\n */\n\n\nfunction Update(ref, params) {\n  arity.exact(2, arguments);\n  return new Expr({\n    update: wrap(ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the instance.\n * @return {Expr}\n */\n\n\nfunction Replace(ref, params) {\n  arity.exact(2, arguments);\n  return new Expr({\n    replace: wrap(ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\n\n\nfunction Delete(ref) {\n  arity.exact(1, arguments);\n  return new Expr({\n    delete: wrap(ref)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the instance.\n * @return {Expr}\n */\n\n\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments);\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the instance whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\n\n\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments);\n  return new Expr({\n    remove: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n */\n\n\nfunction CreateClass(params) {\n  arity.exact(1, arguments);\n  return new Expr({\n    create_class: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\n\n\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments);\n  return new Expr({\n    create_database: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source classes and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\n\n\nfunction CreateIndex(params) {\n  arity.exact(1, arguments);\n  return new Expr({\n    create_index: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to\n *     - role: The role of the new key\n * @return {Expr}\n */\n\n\nfunction CreateKey(params) {\n  arity.exact(1, arguments);\n  return new Expr({\n    create_key: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An objet of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\n\n\nfunction CreateFunction(params) {\n  arity.exact(1, arguments);\n  return new Expr({\n    create_function: wrap(params)\n  });\n} // Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the instance for which to retrieve the singleton set.\n * @return {Expr}\n */\n\n\nfunction Singleton(ref) {\n  arity.exact(1, arguments);\n  return new Expr({\n    singleton: wrap(ref)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\n\n\nfunction Events(ref_set) {\n  arity.exact(1, arguments);\n  return new Expr({\n    events: wrap(ref_set)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\n\n\nfunction Match(index) {\n  arity.min(1, arguments);\n  var args = argsToArray(arguments);\n  args.shift();\n  return new Expr({\n    match: wrap(index),\n    terms: wrap(varargs(args))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\n\n\nfunction Union() {\n  arity.min(1, arguments);\n  return new Expr({\n    union: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\n\n\nfunction Intersection() {\n  arity.min(1, arguments);\n  return new Expr({\n    intersection: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\n\n\nfunction Difference() {\n  arity.min(1, arguments);\n  return new Expr({\n    difference: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\n\n\nfunction Distinct(set) {\n  arity.exact(1, arguments);\n  return new Expr({\n    distinct: wrap(set)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\n\n\nfunction Join(source, target) {\n  arity.exact(2, arguments);\n  return new Expr({\n    join: wrap(source),\n    with: wrap(target)\n  });\n} // Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\n\n\nfunction Login(ref, params) {\n  arity.exact(2, arguments);\n  return new Expr({\n    login: wrap(ref),\n    params: wrap(params)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\n\n\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments);\n  return new Expr({\n    logout: wrap(delete_tokens)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\n\n\nfunction Identify(ref, password) {\n  arity.exact(2, arguments);\n  return new Expr({\n    identify: wrap(ref),\n    password: wrap(password)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction Identity() {\n  arity.exact(0, arguments);\n  return new Expr({\n    identity: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\n\nfunction HasIdentity() {\n  arity.exact(0, arguments);\n  return new Expr({\n    has_identity: null\n  });\n} // String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} strings\n *   A list of strings to concatenate.\n * @param {?module:query~ExprArg} separator\n *   The separator to use between each string.\n * @return {Expr}\n */\n\n\nfunction Concat(strings, separator) {\n  arity.min(1, arguments);\n  separator = defaults(separator, null);\n  return new Expr(params({\n    concat: wrap(strings)\n  }, {\n    separator: wrap(separator)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} string\n *   The string to casefold.\n * @param {module:query~ExprArg} normalizer\n *   The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {Expr}\n */\n\n\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments);\n  return new Expr(params({\n    casefold: wrap(string)\n  }, {\n    normalizer: wrap(normalizer)\n  }));\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Expr}\n */\n\n\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments);\n  min = defaults(min, null);\n  max = defaults(max, null);\n  return new Expr(params({\n    ngram: wrap(terms)\n  }, {\n    min: wrap(min),\n    max: wrap(max)\n  }));\n} // Time and date functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a time object.\n * @return {Expr}\n */\n\n\nfunction Time(string) {\n  arity.exact(1, arguments);\n  return new Expr({\n    time: wrap(string)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\n\n\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments);\n  return new Expr({\n    epoch: wrap(number),\n    unit: wrap(unit)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\n\n\nfunction Date(string) {\n  arity.exact(1, arguments);\n  return new Expr({\n    date: wrap(string)\n  });\n} // Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\n\n\nfunction NextId() {\n  arity.exact(0, arguments);\n  return new Expr({\n    next_id: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\n\n\nfunction NewId() {\n  arity.exact(0, arguments);\n  return new Expr({\n    new_id: null\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\n\n\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        database: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        database: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\n\n\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        index: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        index: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n */\n\n\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        class: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        class: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\n\n\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments);\n\n  switch (arguments.length) {\n    case 1:\n      return new Expr({\n        function: wrap(name)\n      });\n\n    case 2:\n      return new Expr({\n        function: wrap(name),\n        scope: wrap(scope)\n      });\n  }\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\n\n\nfunction Classes(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    classes: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\n\n\nfunction Databases(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    databases: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\n\n\nfunction Indexes(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    indexes: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\n\n\nfunction Functions(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    functions: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\n\n\nfunction Keys(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    keys: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\n\n\nfunction Tokens(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    tokens: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\n\n\nfunction Credentials(scope) {\n  arity.max(1, arguments);\n  scope = defaults(scope, null);\n  return new Expr({\n    credentials: wrap(scope)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\n\n\nfunction Equals() {\n  arity.min(1, arguments);\n  return new Expr({\n    equals: varargs(arguments)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\n\n\nfunction Contains(path, _in) {\n  arity.exact(2, arguments);\n  return new Expr({\n    contains: wrap(path),\n    in: wrap(_in)\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\n\n\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments);\n  var exprObj = {\n    select: wrap(path),\n    from: wrap(from)\n  };\n\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default);\n  }\n\n  return new Expr(exprObj);\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n */\n\n\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments);\n  return new Expr({\n    select_all: wrap(path),\n    from: wrap(from)\n  });\n}\n/**\n * See the [docs](https://fauna.com/documentation/queries#misc_functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\n\n\nfunction Add() {\n  arity.min(1, arguments);\n  return new Expr({\n    add: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://fauna.com/documentation/queries#misc_functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\n\n\nfunction Multiply() {\n  arity.min(1, arguments);\n  return new Expr({\n    multiply: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://fauna.com/documentation/queries#misc_functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\n\n\nfunction Subtract() {\n  arity.min(1, arguments);\n  return new Expr({\n    subtract: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://fauna.com/documentation/queries#misc_functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\n\n\nfunction Divide() {\n  arity.min(1, arguments);\n  return new Expr({\n    divide: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://fauna.com/documentation/queries#misc_functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\n\n\nfunction Modulo() {\n  arity.min(1, arguments);\n  return new Expr({\n    modulo: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction LT() {\n  arity.min(1, arguments);\n  return new Expr({\n    lt: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction LTE() {\n  arity.min(1, arguments);\n  return new Expr({\n    lte: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction GT() {\n  arity.min(1, arguments);\n  return new Expr({\n    gt: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\n\n\nfunction GTE() {\n  arity.min(1, arguments);\n  return new Expr({\n    gte: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\n\n\nfunction And() {\n  arity.min(1, arguments);\n  return new Expr({\n    and: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\n\n\nfunction Or() {\n  arity.min(1, arguments);\n  return new Expr({\n    or: wrap(varargs(arguments))\n  });\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\n\n\nfunction Not(boolean) {\n  arity.exact(1, arguments);\n  return new Expr({\n    not: wrap(boolean)\n  });\n}\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\n\n\nfunction ToString(expr) {\n  arity.exact(1, arguments);\n  return new Expr({\n    to_string: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\n\n\nfunction ToNumber(expr) {\n  arity.exact(1, arguments);\n  return new Expr({\n    to_number: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\n\n\nfunction ToTime(expr) {\n  arity.exact(1, arguments);\n  return new Expr({\n    to_time: wrap(expr)\n  });\n}\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\n\n\nfunction ToDate(expr) {\n  arity.exact(1, arguments);\n  return new Expr({\n    to_date: wrap(expr)\n  });\n} // Helpers\n\n/**\n * @ignore\n */\n\n\nfunction arity(min, max, args) {\n  if (min !== null && args.length < min || max !== null && args.length > max) {\n    throw new errors.InvalidArity(min, max, args.length);\n  }\n}\n\narity.exact = function (n, args) {\n  arity(n, n, args);\n};\n\narity.max = function (n, args) {\n  arity(null, n, args);\n};\n\narity.min = function (n, args) {\n  arity(n, null, args);\n};\n\narity.between = function (min, max, args) {\n  arity(min, max, args);\n};\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\n\n\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key];\n\n    if (val !== null) {\n      mainParams[key] = val;\n    }\n  }\n\n  return mainParams;\n}\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\n\n\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values) ? values : Array.prototype.slice.call(values);\n  return values.length === 1 ? values[0] : valuesAsArr;\n}\n/**\n * @ignore\n */\n\n\nfunction argsToArray(args) {\n  var rv = [];\n  rv.push.apply(rv, args);\n  return rv;\n}\n/**\n * @ignore\n */\n\n\nfunction defaults(param, def) {\n  if (param === undefined) {\n    return def;\n  } else {\n    return param;\n  }\n}\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\n\n\nfunction wrap(obj) {\n  arity.exact(1, arguments);\n\n  if (obj === null) {\n    return null;\n  } else if (obj instanceof Expr) {\n    return obj;\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function (str, symbol) {\n      return symbol;\n    });\n  } else if (typeof obj === 'function') {\n    return Lambda(obj);\n  } else if (Array.isArray(obj)) {\n    return new Expr(obj.map(function (elem) {\n      return wrap(elem);\n    }));\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj);\n  } else if (typeof obj === 'object') {\n    return new Expr({\n      object: wrapValues(obj)\n    });\n  } else {\n    return obj;\n  }\n}\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\n\n\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {};\n    Object.keys(obj).forEach(function (key) {\n      rv[key] = wrap(obj[key]);\n    });\n    return rv;\n  } else {\n    return null;\n  }\n}\n\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: CreateClass,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: Identity,\n  HasIdentity: HasIdentity,\n  Concat: Concat,\n  Casefold: Casefold,\n  NGram: NGram,\n  Time: Time,\n  Epoch: Epoch,\n  Date: Date,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: Class,\n  Function: FunctionFn,\n  Classes: Classes,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: Contains,\n  Select: Select,\n  SelectAll: SelectAll,\n  Add: Add,\n  Multiply: Multiply,\n  Subtract: Subtract,\n  Divide: Divide,\n  Modulo: Modulo,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToTime: ToTime,\n  ToDate: ToDate,\n  wrap: wrap\n};","map":null,"metadata":{},"sourceType":"script"}