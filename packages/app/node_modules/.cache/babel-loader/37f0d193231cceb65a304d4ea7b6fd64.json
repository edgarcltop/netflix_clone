{"ast":null,"code":"'use strict';\n\nvar values = require('./values');\n\nfunction toJSON(object, pretty) {\n  pretty = typeof pretty !== 'undefined' ? pretty : false;\n\n  if (pretty) {\n    return JSON.stringify(object, null, '  ');\n  } else {\n    return JSON.stringify(object);\n  }\n}\n\nfunction parseJSON(json) {\n  return JSON.parse(json, json_parse);\n}\n\nfunction json_parse(_, val) {\n  if (typeof val !== 'object' || val === null) {\n    return val;\n  } else if ('@ref' in val) {\n    var ref = val['@ref'];\n\n    if (!('class' in ref) && !('database' in ref)) {\n      return values.Native.fromName(ref['id']);\n    }\n\n    var cls = json_parse('class', ref['class']);\n    var db = json_parse('database', ref['database']);\n    return new values.Ref(ref['id'], cls, db);\n  } else if ('@obj' in val) {\n    return val['@obj'];\n  } else if ('@set' in val) {\n    return new values.SetRef(val['@set']);\n  } else if ('@ts' in val) {\n    return new values.FaunaTime(val['@ts']);\n  } else if ('@date' in val) {\n    return new values.FaunaDate(val['@date']);\n  } else if ('@bytes' in val) {\n    return new values.Bytes(val['@bytes']);\n  } else if ('@query' in val) {\n    return new values.Query(val['@query']);\n  } else {\n    return val;\n  }\n}\n\nmodule.exports = {\n  toJSON: toJSON,\n  parseJSON: parseJSON\n};","map":null,"metadata":{},"sourceType":"script"}