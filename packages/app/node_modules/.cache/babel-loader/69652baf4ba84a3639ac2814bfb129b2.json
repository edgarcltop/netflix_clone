{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n/**\n * FaunaDB error types. Request errors can originate from\n * the client (e.g. bad method parameters) or from the FaunaDB Server (e.g.\n * invalid queries, timeouts.) Server errors will subclass\n * {@link module:errors~FaunaHTTPError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\n\n\nfunction FaunaError(name, message) {\n  Error.call(this);\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n\n  this.name = name;\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n\n  this.message = message;\n}\n\nutil.inherits(FaunaError, Error);\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message);\n}\n\nutil.inherits(InvalidValue, FaunaError);\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction InvalidArity(min, max, actual) {\n  FaunaError.call(this, 'InvalidArity', 'Function requires ' + messageForArity(min, max) + ' arguments but ' + actual + ' were given.');\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n\n  this.min = min;\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n\n  this.max = max;\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n\n  this.actual = actual;\n\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min;\n    if (min === null) return 'up to ' + max;\n    if (min === max) return min;\n    return 'from ' + min + ' to ' + max;\n  }\n}\n\nutil.inherits(InvalidArity, FaunaError);\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\n\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent;\n  var errors = response.errors;\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code;\n  FaunaError.call(this, name, message);\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n\n  this.requestResult = requestResult;\n}\n\nutil.inherits(FaunaHTTPError, FaunaError);\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\n\nFaunaHTTPError.prototype.errors = function () {\n  return this.requestResult.responseContent.errors;\n};\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\n\n\nFaunaHTTPError.raiseForStatusCode = function (requestResult) {\n  var code = requestResult.statusCode;\n\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult);\n\n      case 401:\n        throw new Unauthorized(requestResult);\n\n      case 403:\n        throw new PermissionDenied(requestResult);\n\n      case 404:\n        throw new NotFound(requestResult);\n\n      case 405:\n        throw new MethodNotAllowed(requestResult);\n\n      case 500:\n        throw new InternalError(requestResult);\n\n      case 503:\n        throw new UnavailableError(requestResult);\n\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult);\n    }\n  }\n};\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\n\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult);\n}\n\nutil.inherits(BadRequest, FaunaHTTPError);\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult);\n}\n\nutil.inherits(Unauthorized, FaunaHTTPError);\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult);\n}\n\nutil.inherits(PermissionDenied, FaunaHTTPError);\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult);\n}\n\nutil.inherits(NotFound, FaunaHTTPError);\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult);\n}\n\nutil.inherits(MethodNotAllowed, FaunaHTTPError);\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult);\n}\n\nutil.inherits(InternalError, FaunaHTTPError);\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\n\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult);\n}\n\nutil.inherits(UnavailableError, FaunaHTTPError);\nmodule.exports = {\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError\n};","map":null,"metadata":{},"sourceType":"script"}