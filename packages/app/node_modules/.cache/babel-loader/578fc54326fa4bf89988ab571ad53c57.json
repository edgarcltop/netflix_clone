{"ast":null,"code":"import _slicedToArray from \"/Users/swyx/Work/netlify-identity-fauna-reddit-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react';\nimport produce from 'immer';\nimport { SSL_OP_NO_COMPRESSION } from 'constants'; // -------------- source code --------------\n\nexport function useInput() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var stateObserver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n    stateObserver(e.target.value);\n  };\n\n  return {\n    value: value,\n    onChange: onChange,\n    setValue: setValue\n  };\n}\n\nfunction noop() {}\n\nexport function useLocalStorage(key) {\n  var optionalCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  useEffect(function () {\n    // chose to make this async\n    var existingValue = localStorage.getItem(key);\n\n    if (existingValue) {\n      var parsedValue = JSON.parse(existingValue);\n      setState(parsedValue);\n      optionalCallback(parsedValue);\n    }\n  }, []);\n\n  var removeItem = function removeItem() {\n    setState(null);\n    localStorage.removeItem(key);\n    optionalCallback(null);\n  };\n\n  var setItem = function setItem(obj) {\n    setState(obj);\n    localStorage.setItem(key, JSON.stringify(obj));\n    optionalCallback(obj);\n  };\n\n  return [state, setItem, removeItem];\n}\nexport function useProduceState(initState) {\n  var observer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n  var _useState5 = useState(initState),\n      _useState6 = _slicedToArray(_useState5, 2),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var cb = function cb(mutatorOrValue, next) {\n    console.log({\n      mutatorOrValue: mutatorOrValue\n    });\n\n    if (isFunction(mutatorOrValue)) {\n      // is a function, put it through immer\n      setState(function (s) {\n        return produce(s, function (d) {\n          return void mutatorOrValue(d);\n        });\n      });\n      observer(state);\n    } else {\n      // is a value\n      setState(mutatorOrValue);\n      observer(mutatorOrValue);\n    }\n\n    if (next) next(); // post setState callback\n  };\n\n  return [state, useCallback(cb, [setState])];\n} // // usage\n// const [state, setState] = useProduceState({\n//   todos: [],\n//   showMenu: false\n// });\n// const closeModal = e => {\n//   setState(draft => draft.showMenu = false);\n// };\n\nexport function useKeydown(key, handler) {\n  useEffect(function () {\n    var cb = function cb(e) {\n      return e.key === key && handler(e);\n    };\n\n    document.body.addEventListener('keydown', cb);\n    return function () {\n      document.body.removeEventListener('keydown', cb);\n    };\n  }, [key, handler]);\n} // export function useOptimisticState(initState) {\n//   const [state, setState] = useState(initState);\n//   const oldState = useRef(state);\n//   function optimisticSetState(nextState) {\n//     oldState.current = state;\n//     setState(nextState);\n//   }\n//   async function tryAPI(somePromise) {\n//     return async function(yay, nay) {\n//       try {\n//         yay(optimisticSetState);\n//         return await somePromise;\n//       } catch (err) {\n//         nay(err);\n//         setState(oldState.current);\n//         return err;\n//       }\n//     };\n//   }\n//   return [state, tryAPI];\n// }\n// // usage\n// const [state, tryAPI] = useOptimisticState({ count: 0})\n// const success = setState => setState({ count : state.count + 1 })\n// const failure = error => console.log('Error: ', error)\n// const onClick = () => tryAPI(api.plusOne())(success, failure)\n// export default function App() {\n//   const [state, setState] = useProduceState({ foo: 1, bar: 2 });\n//   return (\n//     <div>\n//       <h1>setoldstate</h1>\n//       <div>{JSON.stringify(state)}</div>\n//       <button onClick={() => setState(draft => void (draft.foo = 3))}>\n//         test\n//       </button>\n//     </div>\n//   );\n// }\n// https://stackoverflow.com/questions/5999998/how-can-i-check-if-a-javascript-variable-is-function-type\n\nfunction isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}","map":null,"metadata":{},"sourceType":"module"}