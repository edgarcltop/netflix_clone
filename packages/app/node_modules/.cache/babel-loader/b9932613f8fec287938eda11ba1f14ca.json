{"ast":null,"code":"'use strict';\n\nvar btoa = require('btoa-lite');\n\nvar request = require('superagent');\n\nvar errors = require('./errors');\n\nvar query = require('./query');\n\nvar values = require('./values');\n\nvar json = require('./_json');\n\nvar RequestResult = require('./RequestResult');\n\nvar util = require('./_util');\n\nvar PageHelper = require('./PageHelper');\n\nvar Promise = require('es6-promise').Promise;\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"classes/frogs/123\" }`,\n * it will be returned as `new Ref(\"classes/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n */\n\n\nfunction Client(options) {\n  var opts = util.applyDefaults(options, {\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null\n  });\n\n  if (opts.port === null) {\n    opts.port = opts.scheme === 'https' ? 443 : 80;\n  }\n\n  this._baseUrl = opts.scheme + '://' + opts.domain + ':' + opts.port;\n  this._timeout = Math.floor(opts.timeout * 1000);\n  this._secret = opts.secret;\n  this._observer = opts.observer;\n  this._lastSeen = null;\n}\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {Expr}\n *   The query to execute. Created from query functions such as {@link add}.\n * @return {external:Promise<Object>} FaunaDB response object.\n */\n\n\nClient.prototype.query = function (expression) {\n  return this._execute('POST', '', query.wrap(expression));\n};\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\n\n\nClient.prototype.paginate = function (expression, params) {\n  params = defaults(params, {});\n  return new PageHelper(this, expression, params);\n};\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\n\n\nClient.prototype.ping = function (scope, timeout) {\n  return this._execute('GET', 'ping', null, {\n    scope: scope,\n    timeout: timeout\n  });\n};\n\nClient.prototype._execute = function (action, path, data, query) {\n  query = defaults(query, null);\n\n  if (path instanceof values.Ref) {\n    path = path.value;\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query);\n  }\n\n  var startTime = Date.now();\n  var self = this;\n  return this._performRequest(action, path, data, query).then(function (response, rawQuery) {\n    var endTime = Date.now();\n    var responseObject = json.parseJSON(response.text);\n    var requestResult = new RequestResult(self, action, path, query, rawQuery, data, response.text, responseObject, response.status, response.header, startTime, endTime);\n\n    if ('x-last-seen-txn' in response.header) {\n      var time = parseInt(response.header['x-last-seen-txn'], 10);\n\n      if (self._lastSeen == null) {\n        self._lastSeen = time;\n      } else if (self._lastSeen < time) {\n        self._lastSeen = time;\n      }\n    }\n\n    if (self._observer != null) {\n      self._observer(requestResult);\n    }\n\n    errors.FaunaHTTPError.raiseForStatusCode(requestResult);\n    return responseObject['resource'];\n  });\n};\n\nClient.prototype._performRequest = function (action, path, data, query) {\n  var rq = request(action, this._baseUrl + '/' + path);\n\n  if (query) {\n    rq.query(query);\n  }\n\n  var rawQuery = JSON.stringify(data);\n  rq.type('json');\n  rq.send(rawQuery);\n\n  if (this._secret) {\n    rq.set('Authorization', secretHeader(this._secret));\n  }\n\n  if (this._lastSeen) {\n    rq.set('X-Last-Seen-Txn', this._lastSeen);\n  }\n\n  rq.set('X-FaunaDB-API-Version', '2.1');\n  rq.timeout(this._timeout);\n  return new Promise(function (resolve, reject) {\n    rq.end(function (error, result) {\n      // superagent treates 4xx and 5xx status codes as exceptions. We'll handle those ourselves.\n      if (error && error.response === undefined) {\n        reject(error);\n      } else if (error && error.response && !(error.response.status >= 400 && error.response.status <= 599)) {\n        reject(error);\n      } else {\n        resolve(result, rawQuery);\n      }\n    });\n  });\n};\n\nfunction defaults(obj, def) {\n  if (obj === undefined) {\n    return def;\n  } else {\n    return obj;\n  }\n}\n\nfunction secretHeader(secret) {\n  return 'Basic ' + btoa(secret + ':');\n}\n\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}