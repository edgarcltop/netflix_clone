{"ast":null,"code":"import _regeneratorRuntime from \"/Users/swyx/Work/netlify-identity-fauna-reddit-clone/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/swyx/Work/netlify-identity-fauna-reddit-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/swyx/Work/netlify-identity-fauna-reddit-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { useProduceState as useState } from 'hooks';\n\nvar faunadb = require('faunadb');\n\nvar q = faunadb.query;\nexport default function useFauna() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      lists = _React$useState2[0],\n      setLists = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      list = _React$useState4[0],\n      setList = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      _id = _React$useState6[0],\n      set_id = _React$useState6[1];\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  var onAuthChange = function onAuthChange(faunadb_token) {\n    if (!faunadb_token) return null;\n    setClient(new faunadb.Client({\n      secret: faunadb_token\n    }), function () {\n      console.log('onAuthChange', faunadb_token);\n      getServerLists();\n    });\n  };\n\n  function getServerLists() {\n    if (!client) return null;\n    return client.query(q.Map(q.Paginate(q.Match( // todo use lists_by_owner\n    q.Ref('indexes/all_lists'))), function (ref) {\n      return q.Get(ref);\n    })).then(function (r) {\n      return console.log('getServerLists') || r;\n    }).then(function (r) {\n      console.log({\n        r: r\n      });\n\n      if (r.data.length === 0) {\n        // create the first list for the user\n        var me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n        return client.query(q.Create(q.Class('lists'), {\n          data: {\n            title: 'Default Todo List',\n            owner: q.Select('ref', q.Get(q.Ref('classes/users/self')))\n          },\n          permissions: {\n            read: me,\n            write: me\n          }\n        })).then(function (defaultList) {\n          return setLists([defaultList]);\n        });\n      } else {\n        setLists(r.data);\n      }\n    });\n  }\n\n  var refreshList =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _list;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_id) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return client.query(q.Get(q.Ref('classes/lists/' + _id)));\n\n            case 3:\n              _list = _context.sent;\n              // const resp = await client.query(\n              //   q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n              //     q.Get(ref)\n              //   )\n              // );\n              setList(_list);\n              return _context.abrupt(\"return\", _list);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function refreshList() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchList =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(id) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              set_id(id);\n              return _context2.abrupt(\"return\", refreshList());\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function fetchList(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var addList = function addList(title) {\n    var newList = {\n      title: title\n    };\n    var me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newList.owner = me;\n    return client.query(q.Create(q.Class('lists'), {\n      data: newList,\n      permissions: {\n        read: me,\n        write: me\n      }\n    })).then(getServerLists);\n  };\n\n  var addTodo = function addTodo(title, list) {\n    var newTodo = {\n      title: title,\n      list: list.ref,\n      completed: false\n    };\n    var me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newTodo.user = me;\n    return client.query(q.Create(q.Ref('classes/todos'), {\n      data: newTodo,\n      permissions: {\n        read: me,\n        write: me\n      }\n    })).then(refreshList);\n  }; // const toggleAll = (checked, list) => {\n  //   return client.query(\n  //     q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n  //       q.Update(q.Select('ref', q.Get(ref)), {\n  //         data: {\n  //           completed: q.Not(q.Select(['data', 'completed'], q.Get(ref)))\n  //         }\n  //       })\n  //     )\n  //   );\n  // };\n\n\n  var toggle = function toggle(todoToToggle) {\n    console.log('todoToToggle', todoToToggle);\n    return client.query(q.Update(todoToToggle.ref, {\n      data: {\n        completed: !todoToToggle.data.completed\n      }\n    })).then(refreshList);\n  };\n\n  var destroy = function destroy(todo) {\n    return client.query(q.Delete(todo.ref)).then(refreshList);\n  };\n\n  var save = function save(todoToSave, text) {\n    return client.query(q.Update(todoToSave.ref, {\n      data: {\n        title: text\n      }\n    })).then(refreshList);\n  };\n\n  var clearCompleted = function clearCompleted(list) {\n    return client.query(q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), function (ref) {\n      return q.If(q.Select(['data', 'completed'], q.Get(ref)), q.Delete(q.Select('ref', q.Get(ref))), true);\n    })).then(refreshList);\n  };\n\n  return {\n    lists: lists,\n    list: list,\n    fetchList: fetchList,\n    addList: addList,\n    addTodo: addTodo,\n    // toggleAll,\n    toggle: toggle,\n    destroy: destroy,\n    save: save,\n    clearCompleted: clearCompleted,\n    onAuthChange: onAuthChange\n  };\n}","map":{"version":3,"sources":["/Users/swyx/Work/netlify-identity-fauna-reddit-clone/packages/app/src/useFauna.js"],"names":["React","useProduceState","useState","faunadb","require","q","query","useFauna","lists","setLists","list","setList","_id","set_id","client","setClient","onAuthChange","faunadb_token","Client","secret","console","log","getServerLists","Map","Paginate","Match","Ref","ref","Get","then","r","data","length","me","Select","Create","Class","title","owner","permissions","read","write","defaultList","refreshList","_list","fetchList","id","addList","newList","addTodo","newTodo","completed","user","toggle","todoToToggle","Update","destroy","todo","Delete","save","todoToSave","text","clearCompleted","Index","If"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useProduceState as useState } from 'hooks';\nconst faunadb = require('faunadb');\nconst q = faunadb.query;\n\nexport default function useFauna() {\n  const [lists, setLists] = React.useState([]);\n  const [list, setList] = React.useState(null);\n  const [_id, set_id] = React.useState(null);\n  const [client, setClient] = useState();\n  const onAuthChange = faunadb_token => {\n    if (!faunadb_token) return null;\n    setClient(\n      new faunadb.Client({\n        secret: faunadb_token\n      }),\n      () => {\n        console.log('onAuthChange', faunadb_token);\n        getServerLists();\n      }\n    );\n  };\n\n  function getServerLists() {\n    if (!client) return null;\n    return client\n      .query(\n        q.Map(\n          q.Paginate(\n            q.Match(\n              // todo use lists_by_owner\n              q.Ref('indexes/all_lists')\n            )\n          ),\n          ref => q.Get(ref)\n        )\n      )\n      .then(r => console.log('getServerLists') || r)\n      .then(r => {\n        console.log({ r });\n        if (r.data.length === 0) {\n          // create the first list for the user\n          const me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n\n          return client\n            .query(\n              q.Create(q.Class('lists'), {\n                data: {\n                  title: 'Default Todo List',\n                  owner: q.Select('ref', q.Get(q.Ref('classes/users/self')))\n                },\n                permissions: {\n                  read: me,\n                  write: me\n                }\n              })\n            )\n            .then(defaultList => setLists([defaultList]));\n        } else {\n          setLists(r.data);\n        }\n      });\n  }\n\n  const refreshList = async () => {\n    if (_id) {\n      const _list = await client.query(q.Get(q.Ref('classes/lists/' + _id)));\n      // const resp = await client.query(\n      //   q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n      //     q.Get(ref)\n      //   )\n      // );\n      setList(_list);\n      return _list;\n    }\n  };\n\n  const fetchList = async id => {\n    set_id(id);\n    return refreshList();\n  };\n\n  const addList = title => {\n    var newList = { title };\n    const me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newList.owner = me;\n    return client\n      .query(\n        q.Create(q.Class('lists'), {\n          data: newList,\n          permissions: {\n            read: me,\n            write: me\n          }\n        })\n      )\n      .then(getServerLists);\n  };\n\n  const addTodo = (title, list) => {\n    var newTodo = {\n      title: title,\n      list: list.ref,\n      completed: false\n    };\n\n    const me = q.Select('ref', q.Get(q.Ref('classes/users/self')));\n    newTodo.user = me;\n    return client\n      .query(\n        q.Create(q.Ref('classes/todos'), {\n          data: newTodo,\n          permissions: {\n            read: me,\n            write: me\n          }\n        })\n      )\n      .then(refreshList);\n  };\n\n  // const toggleAll = (checked, list) => {\n  //   return client.query(\n  //     q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n  //       q.Update(q.Select('ref', q.Get(ref)), {\n  //         data: {\n  //           completed: q.Not(q.Select(['data', 'completed'], q.Get(ref)))\n  //         }\n  //       })\n  //     )\n  //   );\n  // };\n\n  const toggle = todoToToggle => {\n    console.log('todoToToggle', todoToToggle);\n    return client\n      .query(\n        q.Update(todoToToggle.ref, {\n          data: {\n            completed: !todoToToggle.data.completed\n          }\n        })\n      )\n      .then(refreshList);\n  };\n\n  const destroy = todo => client.query(q.Delete(todo.ref)).then(refreshList);\n\n  const save = (todoToSave, text) => {\n    return client\n      .query(\n        q.Update(todoToSave.ref, {\n          data: { title: text }\n        })\n      )\n      .then(refreshList);\n  };\n\n  const clearCompleted = list => {\n    return client\n      .query(\n        q.Map(q.Paginate(q.Match(q.Index('todos_by_list'), list.ref)), ref =>\n          q.If(\n            q.Select(['data', 'completed'], q.Get(ref)),\n            q.Delete(q.Select('ref', q.Get(ref))),\n            true\n          )\n        )\n      )\n      .then(refreshList);\n  };\n  return {\n    lists,\n    list,\n    fetchList,\n    addList,\n    addTodo,\n    // toggleAll,\n    toggle,\n    destroy,\n    save,\n    clearCompleted,\n    onAuthChange\n  };\n}\n"]},"metadata":{},"sourceType":"module"}